/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    HashMap<Integer,Integer> map=new HashMap<>();
    public int[] findMode(TreeNode root) {
        ArrayList<Integer> list=new ArrayList<>();
     // int a[]=new int[1];
        binary(root);
        int k=0;
        int maxValueInMap=(Collections.max(map.values()));
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) { 
            if (entry.getValue()==maxValueInMap) {
             list.add(entry.getKey());   
    }}
        int a[]=new int[list.size()];
        while(k<list.size()){
        a[k]=list.get(k);
            k++;}
            return a;
        }
    public void binary(TreeNode root){
        if(root==null){
            return;
        }
        binary(root.left);
        if(map.containsKey(root.val)){
            map.put(root.val,map.get(root.val)+1);
        }
        else{
            map.put(root.val,1);
        }
        binary(root.right);
    }
}
