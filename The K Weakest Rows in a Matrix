class Solution {
    public int[] kWeakestRows(int[][] mat, int k) {
        int[] res=new int[k];
        PriorityQueue<Pair> pq=new PriorityQueue<Pair>((a,b)->{
            if(a.co==b.co){
                return a.ind-b.ind;
            }
            return a.co-b.co;
        });
        int m=mat.length;
        int n=mat[0].length;
        for(int i=0;i<m;i++){
            int c=0;
            for(int j=0;j<n;j++){
                if(mat[i][j]==1){
                    c++;
                }
            }
            pq.add(new Pair(c,i));
        }
        int i=0;
        while(i<k && !pq.isEmpty()){
           res[i]=pq.poll().ind;
            i++;
        }
        return res;
    }
}
class Pair{
    int co;
    int ind;
    Pair(int co,int ind){
        this.co=co;
        this.ind=ind;
    }
}
