class Solution {
    public int makeConnected(int n, int[][] connections) {
        if(connections.length<n-1){
            return -1;
        }
        List<List<Integer>> list=new ArrayList<>();
        for(int i=0;i<n;i++){
            list.add(new ArrayList<>());
        }
        for(int i=0;i<connections.length;i++){
            list.get(connections[i][0]).add(connections[i][1]);
            list.get(connections[i][1]).add(connections[i][0]);
        }
        boolean[] vis=new boolean[n];
       

        int c=0;
        for(int i=0;i<n;i++){
            if(!vis[i]){
                bfs(i,vis,list);
                c++;
            }
        }
        return c-1;
    }
    public void bfs(int node,boolean[] vis,List<List<Integer>> list){
         Queue<Integer> q=new LinkedList<>();
         q.add(node);
        while(!q.isEmpty()){
         int curr=q.poll();
            for(int adj:list.get(curr)){
                if(!vis[adj]){
                    q.add(adj);
                    vis[adj]=true;
                }
            }
        }
    }
    
}
