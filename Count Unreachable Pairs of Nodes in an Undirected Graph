class Solution {
    public long countPairs(int n, int[][] edges) {
        List<List<Integer>> list=new ArrayList<>();
        for(int i=0;i<n;i++){
            list.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++){
            list.get(edges[i][0]).add(edges[i][1]);
            list.get(edges[i][1]).add(edges[i][0]);
        }
        long sum=n;
        long res=0;
        boolean[] vis=new boolean[n];
        for(int i=0;i<n;i++){
            if(!vis[i]){
                vis[i]=true;
                int count=bfs(vis,i,list,0);
                sum-=count;
                res+=(sum*count);
            }
        }
        return res;
    }
    public int bfs(boolean[] vis,int i,List<List<Integer>> list,int count){
        Queue<Integer> q=new LinkedList<>();
        q.add(i);
        count++;
        while(!q.isEmpty()){
            int curr=q.poll();
            for(int adj:list.get(curr)){
                if(!vis[adj]){
                    q.add(adj);
                    count++;
                    vis[adj]=true;
                }
            }
        }
        return count;
    }
}
