class Solution {
    public int minReorder(int n, int[][] connections) {
        List<List<Integer>> list=new ArrayList<>();
        for(int i=0;i<n;i++){
            list.add(new ArrayList<>());
        }
        for(int i=0;i<connections.length;i++){
            list.get(connections[i][0]).add(connections[i][1]);
            list.get(connections[i][1]).add(-connections[i][0]);
        }
        Queue<Integer> q=new LinkedList<>();
        boolean[] vis=new boolean[n];
        int c=0;
        q.add(0);
        while(!q.isEmpty()){
            int curr=q.poll();
            for(int adj:list.get(Math.abs(curr))){
                if(!vis[Math.abs(adj)]){
                    q.add(adj);
                    vis[Math.abs(adj)]=true;
                    if(adj>0){
                        c++;
                    }
                }
            }
        }
        return c;
    }
}
