class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
       HashMap<Integer,List<Integer>> map=new HashMap<>();
        for(int i=0;i<numCourses;i++){
            map.put(i,new ArrayList<>());
        }
        for(int i=0;i<prerequisites.length;i++){
            int v1=prerequisites[i][0];
            int v2=prerequisites[i][1];
            map.get(v2).add(v1);
        }
        return topological(map);
    }
    public boolean topological(HashMap<Integer,List<Integer>> map){
        int[] in=Indegree(map);
        Queue<Integer> q=new LinkedList<>();
        for(int i=0;i<in.length;i++){
            if(in[i]==0){
                q.add(i);
            }
        }
        int ans=0;
        while(!q.isEmpty()){
            int r=q.remove();
            ans++;
            for(int k:map.get(r)){
                in[k]--;
                if(in[k]==0){
                    q.add(k);
                }
            }
        }
            return ans==map.size();
    }
    public int[] Indegree(HashMap<Integer,List<Integer>> map){
        int[] in=new int[map.size()];
        for(int key:map.keySet()){
            for(int nbrs:map.get(key)){
                in[nbrs]++;
            }
        }
        return in;
    }
}
