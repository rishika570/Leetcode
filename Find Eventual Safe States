class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int[] vis=new int[graph.length];
        int[] pathvis=new int[graph.length];
        int[] check=new int[graph.length];
        List<Integer> list=new ArrayList<>();
        for(int i=0;i<graph.length;i++){
            if(vis[i]==0){
            dfs(i,vis,pathvis,graph,check);
            }
        }
            for(int i=0;i<graph.length;i++){
                if(check[i]==1){
                    list.add(i);
                }
            }
        return list;
    }
    public boolean dfs(int i,int[] vis,int[] pathvis,int[][] graph,int[] check){
        vis[i]=1;
        pathvis[i]=1;
        check[i]=0;
        for(int node:graph[i]){
            if(vis[node]==0){
                if(dfs(node,vis,pathvis,graph,check)==true){
                    check[node]=0;
                    return true;
                }
            }
            else if(pathvis[node]==1){
                check[node]=0;
                return true;
            }
        }
        check[i]=1;
        pathvis[i]=0;
        return false;
    }
}
