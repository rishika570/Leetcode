class Solution {
    public int maxDistance(int[][] grid) {
        int m=grid.length,n=grid[0].length;
        boolean[][] vis=new boolean[m][n];
        Queue<int[]> q=new LinkedList<>();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    vis[i][j]=true;
                    q.offer(new int[]{i,j});
                }
            }
        }
        int ans=-1;
        int[][] dir=new int[][]{{1,0},{0,1},{-1,0},{0,-1}};
        while(!q.isEmpty()){
            int size=q.size();
            while(size-->0){
            int[] curr=q.poll();
                ans=Math.max(ans,grid[curr[0]][curr[1]]-1);
                for(int[] d:dir){
            int x=d[0]+curr[0];
            int y=d[1]+curr[1];
            if(x>=0 && x<m && y>=0 && y<n && !vis[x][y]){
                vis[x][y]=true;
                grid[x][y]=grid[curr[0]][curr[1]]+1;
                q.offer(new int[]{x,y});
            }
        }
    }
}
     return ans == 0 ? -1 : ans;   
    }
}
