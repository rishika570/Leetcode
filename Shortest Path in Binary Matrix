class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        if(grid[0][0]==1){
            return -1;
        }
        Queue<Pair> q=new LinkedList<>();
        boolean[][] vis=new boolean[grid.length][grid[0].length];
        q.add(new Pair(0,0,1));
        vis[0][0]=true;
        int drow[]={-1,-1,0,1,1,1,0,-1};
        int dcol[]={0,1,1,1,0,-1,-1,-1};
        while(!q.isEmpty()){
            Pair curr=q.poll();
            int ans=curr.res;
            if(curr.row==grid.length-1 && curr.col==grid[0].length-1){
                return ans;
            }
            for(int i=0;i<8;i++){
                int nrow=curr.row+drow[i];
                int ncol=curr.col+dcol[i];
                if(nrow>=0 && nrow<grid.length && ncol>=0 && ncol<grid[0].length && grid[nrow][ncol]==0 && !vis[nrow][ncol]){
                    vis[nrow][ncol]=true;
                    q.add(new Pair(nrow,ncol,ans+1));
                }
            }
        }
        return -1;
    }
}
class Pair{
    int row;
    int col;
    int res;
    Pair(int row,int col,int res){
        this.row=row;
        this.col=col;
        this.res=res;
    }
}
