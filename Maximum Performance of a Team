class Solution {
    class PairComparator implements Comparator<Pair>{
        public int compare(Pair p1,Pair p2){
            if(p1.a<p2.a){
                return 1;
            }
            else if(p1.a>p2.a){
                return -1;
            }
            return 0;
        }
    }
    class Pair{
        int a,b;
        Pair(int a,int b){
            this.a=a;
            this.b=b;
        }
    }
    public int maxPerformance(int n, int[] speed, int[] efficiency, int k) {
      Pair a[]=new Pair[n];
        for(int i=0;i<n;i++){
            a[i]=new Pair(efficiency[i],speed[i]);
        }
        Arrays.sort(a,new PairComparator());
        PriorityQueue<Integer> pq=new PriorityQueue<>();
        long sum=0;
        long ans=0;
        for(Pair p:a){
            pq.add(p.b);
            sum+=p.b;
            if(pq.size()>k){
                sum-=pq.poll();
            }
            ans=Math.max(ans,sum*p.a);
        }
        return (int)(ans%1000000007);
    }
}
