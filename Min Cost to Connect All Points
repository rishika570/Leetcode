class Solution {
    public int minCostConnectPoints(int[][] points) {
       PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->a[2]-b[2]);
        int n=points.length;
        int sum=0,count=0;
        pq.offer(new int[]{0,0,0});
        boolean[] vis=new boolean[n];
        while(!pq.isEmpty() && count<n){
            int[] curr=pq.poll();
            int end=curr[1];
            int dis=curr[2];
            if(!vis[end]){
                sum+=dis;
                vis[end]=true;
                count++;
            }
            for(int i=0;i<n;i++){
                if(!vis[i]){
                int dist=Math.abs(points[i][0]-points[end][0])+Math.abs(points[i][1]-points[end][1]);
                pq.offer(new int[]{end,i,dist});
              }
            }
        }
        return sum;
    }
}
