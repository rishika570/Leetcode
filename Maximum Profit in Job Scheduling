class Solution {
    int[][] jobs;
    int[] dp;
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        jobs = new int[endTime.length][3];
        dp = new int[endTime.length];
        for(int i=0;i<endTime.length;i++) {
            jobs[i] = new int[]{startTime[i], endTime[i], profit[i]};
        }
        Arrays.sort(jobs, (a, b)->{
            return a[0]-b[0];
        });
        return maxProfit(0, endTime.length, 1);
    }

    public int maxProfit(int indx, int n, int prevEndTime) {
        if(indx==n) return 0;
        
        if(prevEndTime>jobs[indx][0]) {
            return maxProfit(indx+1, n, prevEndTime);
        } else {
            if(dp[indx]==0)
                dp[indx] = Math.max(maxProfit(indx+1, n, prevEndTime), maxProfit(indx+1, n, jobs[indx][1])+jobs[indx][2]);
            return dp[indx];
        }
        
    }
}
