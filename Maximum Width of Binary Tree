/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    class Node{
        TreeNode node;
        int idx;
        Node(TreeNode node,int idx){
            this.node=node;
            this.idx=idx;
        }
    }
    public int widthOfBinaryTree(TreeNode root) {
        Queue<Node> q=new LinkedList<>();
        q.add(new Node(root,0));
        int max=0;
        while(!q.isEmpty()){
            int size=q.size();
            int start=0,end=0;
            for(int i=0;i<size;i++){
                Node curr=q.remove();
                int index=curr.idx;
                if(i==0)
                    start=index;
                if(i==size-1)
                    end=index;
                if(curr.node.left!=null){
                    q.add(new Node(curr.node.left,2*curr.idx));
                }
                if(curr.node.right!=null){
                    q.add(new Node(curr.node.right,2*curr.idx+1));
                }
            }
            max=Math.max(max,end-start+1);
        }
        return max;
    }
    
}
