/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int pairSum(ListNode head) {
        int count=0;
        ListNode temp=head;
        while(temp!=null){
            count++;
            temp=temp.next;
        }
        ListNode temp1=null;
        ListNode prev=null;
        int k=0;
        temp=head;
        while(k<count/2){
            k++;
            prev=temp;
            temp=temp.next;
        }
        prev.next=null;
        temp1=temp;
        ListNode newL=reverse(temp1);
        int max=0;
        int sum=0;
        while(head!=null && newL!=null){
            sum=head.val+newL.val;
            max=Math.max(max,sum);
            head=head.next;
            newL=newL.next;
        }
        return max;
    }
    public ListNode reverse(ListNode head) {
    if (head == null || head.next == null)
     return head;
    ListNode rest = reverse(head.next);
    head.next.next = head;
    head.next = null;
    return rest;
  }
}
