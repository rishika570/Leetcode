class Solution {
    int dir[][]={{0,1},{0,-1},{1,0},{-1,0}};
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        List<List<Integer>> al=new ArrayList<>();
        if(heights==null || heights.length==0 || heights[0].length==0){
            return al;
        }
        int row=heights.length;
        int col=heights[0].length;
        boolean pacific[][]=new boolean[row][col];
        boolean atlantic[][]=new boolean[row][col];
        for(int i=0;i<col;i++){
            dfs(0,i,heights,Integer.MIN_VALUE,pacific);
            dfs(row-1,i,heights,Integer.MIN_VALUE,atlantic);
        }
        for(int i=0;i<row;i++){
            dfs(i,0,heights,Integer.MIN_VALUE,pacific);
            dfs(i,col-1,heights,Integer.MIN_VALUE,atlantic);
        }
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(pacific[i][j] && atlantic[i][j]){
                    al.add(Arrays.asList(i,j));
                }
            }
        }
        return al;
        
    }
    public void dfs(int i,int j,int[][] heights,int prev,boolean[][]ocean){
        if(i<0 || i>=ocean.length || j<0 || j>=ocean[0].length){
            return;
        }
        if(heights[i][j]<prev || ocean[i][j]){
            return;
        }
        ocean[i][j]=true;
        for(int [] d:dir){
            dfs(i+d[0],j+d[1],heights,heights[i][j],ocean);
        }
    }
}
