/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            map.put(inorder[i],i);
        }
        return solve(map,postorder,0,inorder.length-1,0,postorder.length-1);
    }
    public TreeNode solve(HashMap<Integer,Integer> map,int[] postorder,int inl,int inr,int pol,int por){
        if(inl>inr){
            return null;
        }
        TreeNode root=new TreeNode(postorder[por]);
        int ind=map.get(root.val);
        root.left=solve(map,postorder,inl,ind-1,pol,pol-inl+ind-1);
        root.right=solve(map,postorder,ind+1,inr,por-inr+ind,por-1);
        return root;
    }
}
